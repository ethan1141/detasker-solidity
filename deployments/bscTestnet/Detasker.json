{
  "address": "0x3306AC571955F0657492DF11722143C334eF774f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "whoItFor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "whoCompletedIt",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "waitForConformation",
          "type": "bool"
        }
      ],
      "name": "CompletingJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PaidForAJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "Jobdeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveTokenSpend",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "assignJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "rating",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "review",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "jobId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Detasker.Rating",
          "name": "_rating",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "completeJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFreelancer",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "mainSkills",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "skillsId",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Detasker.Freelance",
          "name": "freelance",
          "type": "tuple"
        }
      ],
      "name": "createFreelance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasFunds",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "img",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "postedDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "datePaid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "documents",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "requestedPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tags",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "publish",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "assigned",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "dateCompleted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "datePublished",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "dispute",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "deleted",
              "type": "bool"
            }
          ],
          "internalType": "struct Detasker.Job",
          "name": "_job",
          "type": "tuple"
        }
      ],
      "name": "createJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "skill",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "skillName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Detasker.Skill",
          "name": "_skill",
          "type": "tuple"
        }
      ],
      "name": "createSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "internalType": "struct Detasker.Social",
          "name": "_social",
          "type": "tuple"
        }
      ],
      "name": "createSocial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isFreelancer",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "active",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "mainSkills",
                  "type": "string"
                },
                {
                  "internalType": "uint256[]",
                  "name": "skillsId",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Detasker.Freelance",
              "name": "freelance",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                }
              ],
              "internalType": "struct Detasker.Social[]",
              "name": "socials",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                }
              ],
              "internalType": "struct Detasker.ShowcaseWork[]",
              "name": "showcaseWork",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "profileId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "skill",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "skillName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "internalType": "struct Detasker.Skill[]",
              "name": "skills",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Detasker.NewProfile",
          "name": "_profile",
          "type": "tuple"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        }
      ],
      "name": "getConformationDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_jobId",
          "type": "uint256"
        }
      ],
      "name": "getJobById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasFunds",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "img",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "postedDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "datePaid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "documents",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "requestedPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tags",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "publish",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "assigned",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "dateCompleted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "datePublished",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "dispute",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "deleted",
              "type": "bool"
            }
          ],
          "internalType": "struct Detasker.Job",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_jobId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getJobById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasFunds",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "img",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "postedDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "datePaid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "documents",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "requestedPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tags",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "publish",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "assigned",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "dateCompleted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "datePublished",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "dispute",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "deleted",
              "type": "bool"
            }
          ],
          "internalType": "struct Detasker.Job",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "jobWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_jobId",
          "type": "uint256"
        }
      ],
      "name": "payForJobByOwner",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_jobId",
          "type": "uint256"
        }
      ],
      "name": "recievePaymentForJobByRequester",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "setJobDoneByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "setJobDoneByRequester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeForConformation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeLanceId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "signedUp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vars",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freelanceCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratingCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tagCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "skillCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bnbToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc1801a6d58cd1db631097c95803170b8ded99012f95a48ce6ad35c667bf271a7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3306AC571955F0657492DF11722143C334eF774f",
    "transactionIndex": 2,
    "gasUsed": "3765595",
    "logsBloom": "0x
    "blockHash": "0x576de12268d53e9b3d22a2b5fe76b1cc44a8dfe31b7833008d4ca04418c902be",
    "transactionHash": "0xc1801a6d58cd1db631097c95803170b8ded99012f95a48ce6ad35c667bf271a7",
    "logs": [],
    "blockNumber": 29177164,
    "cumulativeGasUsed": "3985918",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "064225752220394cc6a47cb4cd33987b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whoItFor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whoCompletedIt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"waitForConformation\",\"type\":\"bool\"}],\"name\":\"CompletingJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PaidForAJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"Jobdeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveTokenSpend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"assignJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"review\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"internalType\":\"struct Detasker.Rating\",\"name\":\"_rating\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"completeJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFreelancer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"mainSkills\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"skillsId\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Detasker.Freelance\",\"name\":\"freelance\",\"type\":\"tuple\"}],\"name\":\"createFreelance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasFunds\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"img\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datePaid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"documents\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestedPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tags\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"publish\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"assigned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dateCompleted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datePublished\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dispute\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"}],\"internalType\":\"struct Detasker.Job\",\"name\":\"_job\",\"type\":\"tuple\"}],\"name\":\"createJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"skill\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"skillName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Detasker.Skill\",\"name\":\"_skill\",\"type\":\"tuple\"}],\"name\":\"createSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Detasker.Social\",\"name\":\"_social\",\"type\":\"tuple\"}],\"name\":\"createSocial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFreelancer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"mainSkills\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"skillsId\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Detasker.Freelance\",\"name\":\"freelance\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Detasker.Social[]\",\"name\":\"socials\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Detasker.ShowcaseWork[]\",\"name\":\"showcaseWork\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"skill\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"skillName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Detasker.Skill[]\",\"name\":\"skills\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Detasker.NewProfile\",\"name\":\"_profile\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"getConformationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jobId\",\"type\":\"uint256\"}],\"name\":\"getJobById\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasFunds\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"img\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datePaid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"documents\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestedPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tags\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"publish\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"assigned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dateCompleted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datePublished\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dispute\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"}],\"internalType\":\"struct Detasker.Job\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jobId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getJobById\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasFunds\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"img\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datePaid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"documents\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestedPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tags\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"publish\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"assigned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dateCompleted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datePublished\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dispute\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"}],\"internalType\":\"struct Detasker.Job\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"jobWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jobId\",\"type\":\"uint256\"}],\"name\":\"payForJobByOwner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jobId\",\"type\":\"uint256\"}],\"name\":\"recievePaymentForJobByRequester\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"setJobDoneByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"setJobDoneByRequester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeForConformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeLanceId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"signedUp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freelanceCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tagCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skillCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bnbToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"ownerWithdraw(address,uint256)\":{\"params\":{\"_token\":\"s\",\"jobId\":\"we\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Detasker.sol\":\"Detasker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Detasker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n/**\\n * @title Detasker - a simple smart contract to facilitate users in web3 anouncing jobs and/or skills\\n * @author Ethan Russell <ethanrussell.dev>\\n * @notice\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// library utils {\\n//     function getSecondsPerDay() internal pure returns (uint256) {\\n//         return 86400;\\n//     }\\n\\n//     function getTimeForConformation(uint _days) public pure returns (uint256) {\\n//         return getSecondsPerDay() * _days;\\n//     }\\n// }\\n\\ncontract Detasker is ERC20(\\\"Detasker\\\", \\\"dtsk\\\") {\\n    mapping(address => Profile) public users;\\n    Item public vars;\\n    uint public timeForConformation = getConformationDays(30);\\n    event PaidForAJob(uint amount, uint timestamp);\\n    event CompletingJob(\\n        address whoItFor,\\n        address whoCompletedIt,\\n        uint forAmount,\\n        bool waitForConformation\\n    );\\n    struct Item {\\n        address owner;\\n        Job[] jobs;\\n        Rating[] ratings;\\n        Skill[] skills;\\n        Dispute[] dispute;\\n        Freelance[] freelance;\\n        uint256 jobCount;\\n        uint256 freelanceCount;\\n        uint256 ratingCount;\\n        uint256 tagCount;\\n        uint256 skillCount;\\n        uint256 userCount;\\n        address bnbToken;\\n    }\\n    struct Dispute {\\n        string reason;\\n        uint timestamp;\\n    }\\n    struct Freelance {\\n        uint256 id;\\n        bool isFreelancer;\\n        bool active;\\n        string mainSkills;\\n        uint256[] skillsId;\\n    }\\n    struct Job {\\n        bool hasFunds;\\n        uint256 id;\\n        uint256 profileId;\\n        string title;\\n        string description;\\n        string[] img; // with greenfield\\n        address owner;\\n        address requester;\\n        uint256 postedDate;\\n        uint256 date;\\n        uint256 datePaid;\\n        string documents;\\n        uint256 requestedPaymentAmount;\\n        address token;\\n        uint256[] tags;\\n        bool publish;\\n        bool completed;\\n        bool paid;\\n        bool assigned;\\n        uint256 dateCompleted;\\n        uint256 datePublished;\\n        uint256[] dispute;\\n        bool deleted;\\n    }\\n\\n    struct Tag {\\n        uint256 id;\\n        string name;\\n    }\\n\\n    struct ShowcaseWork {\\n        uint256 id;\\n        string description;\\n        string url;\\n    }\\n\\n    struct Rating {\\n        uint256 id;\\n        uint8 rating;\\n        string review;\\n        uint256 jobId;\\n    }\\n\\n    struct Skill {\\n        uint256 id;\\n        uint256 profileId;\\n        string skill;\\n        string skillName;\\n        string url;\\n        address user;\\n    }\\n\\n    struct Profile {\\n        uint256 id;\\n        uint256 freeLanceId;\\n        string name;\\n        string email;\\n        Social[] socials;\\n        uint256 signedUp;\\n        string image;\\n        uint256[] jobsId;\\n        uint256[] ratings;\\n        mapping(address => uint256) escrow;\\n    }\\n\\n    struct NewProfile {\\n        string name;\\n        string email;\\n        Freelance freelance;\\n        string image;\\n        Social[] socials; // 2D array [ 0: [ name, url ] ]\\n        ShowcaseWork[] showcaseWork;\\n        Skill[] skills;\\n    }\\n\\n    struct Social {\\n        string name;\\n        string url;\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return vars.userCount;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return vars.owner;\\n    }\\n\\n    function getConformationDays(uint256 _days) public pure returns (uint256) {\\n        return 86400 * _days;\\n    }\\n\\n    constructor(address _owner) {\\n        vars.owner = _owner;\\n        vars.bnbToken = address(0xEE786A1aA32fc164cca9A28F763Fbc835E748129); //\\n    }\\n\\n    // function postAJob(Job memory _job) public {\\n    //     vars.jobCount++;\\n    //     _job.datePublished = (_job.publish ? block.timestamp : 0);\\n\\n    //     _job.owner = msg.sender;\\n    //     vars.jobs[vars.jobCount] = _job;\\n    //     users[msg.sender].jobsId.push(vars.jobCount);\\n    // }\\n\\n    function createFreelance(\\n        address _address,\\n        Freelance memory freelance\\n    ) public {\\n        require(\\n            users[_address].freeLanceId != 0,\\n            \\\"Please go through the update method\\\"\\n        );\\n        vars.freelanceCount++;\\n        freelance.id = vars.freelanceCount;\\n        vars.freelance.push(freelance);\\n        users[_address].freeLanceId = vars.freelanceCount;\\n    }\\n\\n    function createUser(address _address, NewProfile memory _profile) public {\\n        vars.userCount++;\\n        users[_address].id = vars.userCount;\\n        users[_address].name = _profile.name;\\n        users[_address].name = _profile.email;\\n        users[_address].signedUp = block.timestamp;\\n        users[_address].image = _profile.image;\\n        createFreelance(_address, _profile.freelance);\\n\\n        if (_profile.skills.length != 0) {\\n            for (uint i = 0; i < _profile.skills.length; i++) {\\n                this.createSkill(_address, _profile.skills[i]);\\n            }\\n        }\\n        if (_profile.socials.length != 0) {\\n            for (uint i = 0; i < _profile.socials.length; i++) {\\n                this.createSocial(_address, _profile.socials[i]);\\n            }\\n        }\\n        // if (_profile.skills.length != 0) {\\n        //     for (uint i = 0; i < _profile.skills.length; i++) {\\n        //         this.createSkill(_address, _profile.skills[i]);\\n        //     }\\n        // }\\n        // if (_profile.skills.length != 0) {\\n        //     for (uint i = 0; i < _profile.skills.length; i++) {\\n        //         this.createSkill(_address, _profile.skills[i]);\\n        //     }\\n        // }\\n        // users[_address].socials = _profile.socials;\\n        // users[_address].showcaseWork = _profile.showcaseWork;\\n        // users[_address].jobsId = _profile.jobsId;\\n        // users[_address].ratings = _profile.ratings;\\n        // users[_address].skills = _profile.skills;\\n        // );\\n        // users[_address] = _profile;\\n    }\\n\\n    function createSkill(address _address, Skill memory _skill) public {\\n        uint256 id = vars.skillCount++;\\n        _skill.id = id;\\n        _skill.user = _address;\\n        vars.freelance[users[_address].freeLanceId].skillsId.push(id);\\n        vars.skills[id] = _skill;\\n        vars.skillCount = id;\\n    }\\n\\n    function createSocial(address _address, Social memory _social) public {\\n        users[_address].socials.push(_social);\\n    }\\n\\n    function createJob(address _address, Job memory _job) public {\\n        vars.jobCount++;\\n        _job.id = vars.jobCount;\\n        if (_job.publish) {\\n            _job.postedDate = block.timestamp;\\n        }\\n        _job.owner = _address;\\n        users[_address].jobsId.push(vars.jobCount);\\n        vars.jobs[vars.jobCount] = _job;\\n    }\\n\\n    function completeJob(\\n        address _address,\\n        Rating memory _rating,\\n        uint256 jobId\\n    ) public {\\n        Job memory _job = getJobById(jobId);\\n        require(_job.requester == _address, \\\"This isn't your assigned job\\\");\\n        require(\\n            _rating.rating >= 0 && _rating.rating <= 5,\\n            \\\"Please give this job a rating out of 5\\\"\\n        );\\n\\n        vars.ratingCount++;\\n        _rating.id = vars.ratingCount;\\n        vars.ratings[vars.ratingCount] = _rating;\\n\\n        emit CompletingJob(\\n            _job.owner,\\n            _job.requester,\\n            _job.requestedPaymentAmount,\\n            true\\n        );\\n    }\\n\\n    // function dispueAJob(string calldata _reason, uint256 _jobId) external {\\n    //     Job memory _job = getJobById(_jobId);\\n    //     _job.dispute[_job.dispute.length] = Dispute(_reason, block.timestamp);\\n    //     _job.completed = false;\\n    //     setJobById(_job);\\n    // }\\n\\n    function assignJob(address _address, uint jobId) public {\\n        Job memory _job = getJobById(jobId);\\n        _job.assigned = true;\\n        _job.requester = _address;\\n        setJobById(_job);\\n    }\\n\\n    function getJobById(uint256 _jobId) public view returns (Job memory) {\\n        Job memory _job = vars.jobs[_jobId];\\n        require(_job.id > 0, \\\"Unable to get a job with that id\\\");\\n        return _job;\\n    }\\n\\n    function getJobById(\\n        uint256 _jobId,\\n        address _address\\n    ) public view returns (Job memory) {\\n        Job memory _job = vars.jobs[_jobId];\\n        require(_job.id > 0, \\\"Unable to get a job with that id\\\");\\n        require(_job.owner == _address, \\\"This isn't your assigned job\\\");\\n        return _job;\\n    }\\n\\n    function setJobById(Job memory _job) private {\\n        vars.jobs[_job.id] = _job;\\n    }\\n\\n    function payForJobByOwner(uint256 _jobId) public payable {\\n        Job memory _job = getJobById(_jobId);\\n        require(!_job.paid, \\\"This job has alread been paid\\\");\\n        require(\\n            !_job.completed,\\n            \\\"wait for the assignee to confirm completeness\\\"\\n        );\\n        require(_job.owner == msg.sender, \\\"You don't own this job\\\");\\n        ownerWithdraw(_job.token, _jobId);\\n        emit PaidForAJob(_job.requestedPaymentAmount, block.timestamp);\\n    }\\n\\n    function recievePaymentForJobByRequester(uint256 _jobId) public payable {\\n        Job memory _job = getJobById(_jobId);\\n        require(!_job.paid, \\\"This job has alread been paid\\\");\\n        require(\\n            !_job.completed,\\n            \\\"wait for the assignee to confirm completeness\\\"\\n        );\\n        require(\\n            _job.requester != msg.sender,\\n            \\\"You are not assigned to this job\\\"\\n        );\\n        jobWithdraw(_job.token, _jobId);\\n        emit PaidForAJob(_job.requestedPaymentAmount, block.timestamp);\\n    }\\n\\n    function setJobDoneByOwner(address _address, uint256 jobId) public {\\n        Job memory _job = getJobById(jobId, _address);\\n        _job.completed = true;\\n        _job.dateCompleted = block.timestamp;\\n        setJobById(_job);\\n    }\\n\\n    function setJobDoneByRequester(address _address, uint256 jobId) public {\\n        Job memory _job = getJobById(jobId);\\n        require(_job.requester == _address, \\\"You don't own this job\\\");\\n        _job.completed = true;\\n        _job.dateCompleted = block.timestamp;\\n        setJobById(_job);\\n    }\\n\\n    function approveTokenSpend(\\n        address _token,\\n        address spender,\\n        uint amount\\n    ) public returns (bool) {\\n        return ERC20(_token).approve(spender, amount);\\n    }\\n\\n    function allowance(\\n        address _address,\\n        address _token\\n    ) public view override returns (uint256) {\\n        return ERC20(_token).allowance(address(this), _address);\\n    }\\n\\n    function Jobdeposit(address _token, uint256 jobId) public payable {\\n        Job memory _job = getJobById(jobId, msg.sender);\\n        require(\\n            IERC20(_token).allowance(msg.sender, address(this)) < msg.value,\\n            \\\"Amount approved is less then token transferred amount to contract\\\"\\n        );\\n        if (msg.value >= _job.requestedPaymentAmount) {\\n            IERC20(_token).transfer(address(this), msg.value);\\n            users[msg.sender].escrow[_token] += msg.value;\\n            _job.token = _token;\\n            _job.hasFunds = true;\\n            setJobById(_job);\\n        }\\n    }\\n\\n    function jobWithdraw(address _token, uint256 jobId) public payable {\\n        Job memory _job = getJobById(jobId);\\n        require(\\n            IERC20(_token).allowance(address(this), msg.sender) < msg.value,\\n            \\\"Amount approved is less then token transferred amount\\\"\\n        );\\n        if (msg.value >= _job.requestedPaymentAmount) {\\n            IERC20(_token).transferFrom(address(this), msg.sender, msg.value);\\n            users[msg.sender].escrow[_token] -= msg.value;\\n            _job.paid = true;\\n            _job.datePaid = block.timestamp;\\n            setJobById(_job);\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param _token s\\n     * @param jobId we\\n     */\\n    function ownerWithdraw(address _token, uint256 jobId) public payable {\\n        Job memory _job = getJobById(jobId);\\n        require(\\n            IERC20(_token).allowance(address(this), _job.owner) < msg.value,\\n            \\\"Amount approved is less then token transferred amount\\\"\\n        );\\n        if (msg.value >= _job.requestedPaymentAmount) {\\n            IERC20(_token).transferFrom(address(this), _job.owner, msg.value);\\n            users[msg.sender].escrow[_token] -= msg.value;\\n            _job.paid = true;\\n            _job.datePaid = block.timestamp;\\n            setJobById(_job);\\n        }\\n    }\\n\\n    function balanceOf(\\n        address _address,\\n        address _token\\n    ) external view returns (uint256) {\\n        return users[_address].escrow[_token];\\n    }\\n\\n    receive() external payable {\\n        users[msg.sender].escrow[vars.bnbToken] += msg.value;\\n    }\\n}\\n\",\"keccak256\":\"0x3358938e3a7301eb453526b003532c8d05159b8963b0ac0c11e401c9267d49a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262000010601e620000e7565b6013553480156200002057600080fd5b50604051620043e9380380620043e98339810160408190526200004391620000fe565b604051806040016040528060088152602001672232ba30b9b5b2b960c11b815250604051806040016040528060048152602001636474736b60e01b8152508160039081620000929190620001d5565b506004620000a18282620001d5565b5050600680546001600160a01b039093166001600160a01b0319938416179055506012805490911673ee786a1aa32fc164cca9a28f763fbc835e748129179055620002c7565b6000620000f88262015180620002a1565b92915050565b6000602082840312156200011157600080fd5b81516001600160a01b03811681146200012957600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015b57607f821691505b6020821081036200017c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d057600081815260208120601f850160051c81016020861015620001ab5750805b601f850160051c820191505b81811015620001cc57828155600101620001b7565b5050505b505050565b81516001600160401b03811115620001f157620001f162000130565b620002098162000202845462000146565b8462000182565b602080601f831160018114620002415760008415620002285750858301515b600019600386901b1c1916600185901b178555620001cc565b600085815260208120601f198616915b82811015620002725788860151825594840194600190910190840162000251565b5085821015620002915787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417620000f857634e487b7160e01b600052601160045260246000fd5b61411280620002d76000396000f3fe6080604052600436106102085760003560e01c806395d1d3b011610118578063b770242f116100a0578063dbfc25121161006f578063dbfc251214610689578063dd62ed3e146106a9578063e07af654146106c9578063e683e0b2146106dc578063f7888aec146106ef57600080fd5b8063b770242f1461063a578063d1388c751461064d578063d9c88e1414610663578063db9667c71461067657600080fd5b8063a7d39dd6116100e7578063a7d39dd614610593578063a87430ba146105b3578063a9059cbb146105e5578063b5cb15f714610605578063b64439161461061a57600080fd5b806395d1d3b01461051e57806395d89b411461053e578063a082ff4614610553578063a457c2d71461057357600080fd5b806369d7428f1161019b5780638412277d1161016a5780638412277d146104765780638937574c14610496578063893d20e8146104b65780639121ae6d146104de578063957822e7146104fe57600080fd5b806369d7428f146103d357806370a08231146104005780637155b4f9146104365780637bf8d39b1461045657600080fd5b806318160ddd116101d757806318160ddd1461035857806323b872dd14610377578063313ce5671461039757806339509351146103b357600080fd5b806306fdde0314610252578063095ea7b31461027d5780630b27c9ab146102ad5780630e5376d6146102cf57600080fd5b3661024d573360009081526005602090815260408083206012546001600160a01b0316845260090190915281208054349290610245908490612d9e565b925050819055005b600080fd5b34801561025e57600080fd5b50610267610739565b6040516102749190612df7565b60405180910390f35b34801561028957600080fd5b5061029d610298366004612e26565b6107cb565b6040519015158152602001610274565b3480156102b957600080fd5b506102cd6102c836600461303f565b6107e5565b005b3480156102db57600080fd5b50600654600c54600d54600e54600f5460105460115460125461030e976001600160a01b03908116979695949392911688565b604080516001600160a01b03998a16815260208101989098528701959095526060860193909352608085019190915260a084015260c083015290911660e082015261010001610274565b34801561036457600080fd5b506002545b604051908152602001610274565b34801561038357600080fd5b5061029d61039236600461308c565b610842565b3480156103a357600080fd5b5060405160128152602001610274565b3480156103bf57600080fd5b5061029d6103ce366004612e26565b610866565b3480156103df57600080fd5b506103f36103ee3660046130c8565b610888565b604051610274919061316e565b34801561040c57600080fd5b5061036961041b36600461336c565b6001600160a01b031660009081526020819052604090205490565b34801561044257600080fd5b506102cd610451366004612e26565b610d6b565b34801561046257600080fd5b506103f3610471366004613387565b610d9d565b34801561048257600080fd5b5061029d61049136600461308c565b6112e7565b3480156104a257600080fd5b506102cd6104b13660046133b3565b611366565b3480156104c257600080fd5b506006546040516001600160a01b039091168152602001610274565b3480156104ea57600080fd5b506102cd6104f9366004613520565b61152a565b34801561050a57600080fd5b506103696105193660046130c8565b61164b565b34801561052a57600080fd5b506102cd610539366004612e26565b61165a565b34801561054a57600080fd5b506102676116dd565b34801561055f57600080fd5b506102cd61056e3660046138af565b6116ec565b34801561057f57600080fd5b5061029d61058e366004612e26565b611903565b34801561059f57600080fd5b506102cd6105ae366004612e26565b61197e565b3480156105bf57600080fd5b506105d36105ce36600461336c565b6119a4565b60405161027496959493929190613a06565b3480156105f157600080fd5b5061029d610600366004612e26565b611b71565b34801561061157600080fd5b50601154610369565b34801561062657600080fd5b506102cd610635366004613add565b611b7f565b6102cd6106483660046130c8565b611dfa565b34801561065957600080fd5b5061036960135481565b6102cd610671366004612e26565b611f23565b6102cd6106843660046130c8565b6120a5565b34801561069557600080fd5b506102cd6106a4366004613d0f565b61219c565b3480156106b557600080fd5b506103696106c4366004613d52565b612331565b6102cd6106d7366004612e26565b6123a5565b6102cd6106ea366004612e26565b612484565b3480156106fb57600080fd5b5061036961070a366004613d52565b6001600160a01b0391821660009081526005602090815260408083209390941682526009909201909152205490565b60606003805461074890613d7c565b80601f016020809104026020016040519081016040528092919081815260200182805461077490613d7c565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b5050505050905090565b6000336107d9818585612655565b60019150505b92915050565b6001600160a01b0382166000908152600560209081526040822060040180546001810182559083529120825183926002029091019081906108269082613e04565b506020820151600182019061083b9082613e04565b5050505050565b600033610850858285612779565b61085b8585856127f3565b506001949350505050565b6000336107d98185856108798383612331565b6108839190612d9e565b612655565b610890612ba7565b6000600660010183815481106108a8576108a8613ec3565b9060005260206000209060140201604051806102e00160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201805461090190613d7c565b80601f016020809104026020016040519081016040528092919081815260200182805461092d90613d7c565b801561097a5780601f1061094f5761010080835404028352916020019161097a565b820191906000526020600020905b81548152906001019060200180831161095d57829003601f168201915b5050505050815260200160048201805461099390613d7c565b80601f01602080910402602001604051908101604052809291908181526020018280546109bf90613d7c565b8015610a0c5780601f106109e157610100808354040283529160200191610a0c565b820191906000526020600020905b8154815290600101906020018083116109ef57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610ae6578382906000526020600020018054610a5990613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8590613d7c565b8015610ad25780601f10610aa757610100808354040283529160200191610ad2565b820191906000526020600020905b815481529060010190602001808311610ab557829003601f168201915b505050505081526020019060010190610a3a565b5050509082525060068201546001600160a01b03908116602083015260078301541660408201526008820154606082015260098201546080820152600a82015460a0820152600b8201805460c090920191610b4090613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6c90613d7c565b8015610bb95780601f10610b8e57610100808354040283529160200191610bb9565b820191906000526020600020905b815481529060010190602001808311610b9c57829003601f168201915b50505050508152602001600c8201548152602001600d820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600e8201805480602002602001604051908101604052809291908181526020018280548015610c4a57602002820191906000526020600020905b815481526020019060010190808311610c36575b5050509183525050600f82015460ff8082161515602080850191909152610100830482161515604080860191909152620100008404831615156060860152630100000090930490911615156080840152601084015460a0840152601184015460c084015260128401805483518184028101840190945280845260e0909401939091830182828015610cfa57602002820191906000526020600020905b815481526020019060010190808311610ce6575b50505091835250506013919091015460ff1615156020918201528101519091506107df5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206765742061206a6f622077697468207468617420696460448201526064015b60405180910390fd5b6000610d7682610888565b60016102408201526001600160a01b03841660e08201529050610d9881612997565b505050565b610da5612ba7565b600060066001018481548110610dbd57610dbd613ec3565b9060005260206000209060140201604051806102e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382018054610e1690613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4290613d7c565b8015610e8f5780601f10610e6457610100808354040283529160200191610e8f565b820191906000526020600020905b815481529060010190602001808311610e7257829003601f168201915b50505050508152602001600482018054610ea890613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed490613d7c565b8015610f215780601f10610ef657610100808354040283529160200191610f21565b820191906000526020600020905b815481529060010190602001808311610f0457829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610ffb578382906000526020600020018054610f6e90613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9a90613d7c565b8015610fe75780601f10610fbc57610100808354040283529160200191610fe7565b820191906000526020600020905b815481529060010190602001808311610fca57829003601f168201915b505050505081526020019060010190610f4f565b5050509082525060068201546001600160a01b03908116602083015260078301541660408201526008820154606082015260098201546080820152600a82015460a0820152600b8201805460c09092019161105590613d7c565b80601f016020809104026020016040519081016040528092919081815260200182805461108190613d7c565b80156110ce5780601f106110a3576101008083540402835291602001916110ce565b820191906000526020600020905b8154815290600101906020018083116110b157829003601f168201915b50505050508152602001600c8201548152602001600d820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600e820180548060200260200160405190810160405280929190818152602001828054801561115f57602002820191906000526020600020905b81548152602001906001019080831161114b575b5050509183525050600f82015460ff8082161515602080850191909152610100830482161515604080860191909152620100008404831615156060860152630100000090930490911615156080840152601084015460a0840152601184015460c084015260128401805483518184028101840190945280845260e090940193909183018282801561120f57602002820191906000526020600020905b8154815260200190600101908083116111fb575b50505091835250506013919091015460ff16151560209182015281015190915061127b5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206765742061206a6f62207769746820746861742069646044820152606401610d62565b826001600160a01b03168160c001516001600160a01b0316146112e05760405162461bcd60e51b815260206004820152601c60248201527f546869732069736e277420796f75722061737369676e6564206a6f62000000006044820152606401610d62565b9392505050565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018390526000919085169063095ea7b3906044016020604051808303816000875af115801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e9190613ed9565b949350505050565b600061137182610888565b9050836001600160a01b03168160e001516001600160a01b0316146113d85760405162461bcd60e51b815260206004820152601c60248201527f546869732069736e277420796f75722061737369676e6564206a6f62000000006044820152606401610d62565b6005836020015160ff16111561143f5760405162461bcd60e51b815260206004820152602660248201527f506c6561736520676976652074686973206a6f62206120726174696e67206f7560448201526574206f66203560d01b6064820152608401610d62565b600e805490600061144f83613ef6565b9091555050600e5480845260088054859290811061146f5761146f613ec3565b60009182526020918290208351600492909202019081559082015160018201805460ff191660ff909216919091179055604082015160028201906114b39082613e04565b5060609182015160039091015560c082015160e0830151610180840151604080516001600160a01b039485168152939092166020840152908201526001918101919091527ff0df160ccfdc4d85bea09bf3ea667729d9e0c9126b24d28eef8b06e5fe027f2f9060800160405180910390a150505050565b601080546000918261153b83613ef6565b909155508083526001600160a01b03841660a08401819052600090815260056020526040902060010154600b805492935091811061157b5761157b613ec3565b60009182526020808320600360049093020191909101805460018101825590835291200181905560098054839190839081106115b9576115b9613ec3565b9060005260206000209060060201600082015181600001556020820151816001015560408201518160020190816115f09190613e04565b50606082015160038201906116059082613e04565b506080820151600482019061161a9082613e04565b5060a09190910151600590910180546001600160a01b0319166001600160a01b039092169190911790556010555050565b60006107df8262015180613f0f565b600061166582610888565b9050826001600160a01b03168160e001516001600160a01b0316146116c55760405162461bcd60e51b81526020600482015260166024820152752cb7ba903237b713ba1037bbb7103a3434b9903537b160511b6044820152606401610d62565b600161020082015242610260820152610d9881612997565b60606004805461074890613d7c565b601180549060006116fc83613ef6565b90915550506011546001600160a01b038316600090815260056020526040902090815581516002909101906117319082613e04565b506020808201516001600160a01b0384166000908152600590925260409091206002019061175f9082613e04565b506001600160a01b0382166000908152600560208190526040909120429181019190915560608201516006909101906117989082613e04565b506117a782826040015161219c565b60c081015151156118545760005b8160c001515181101561185257306001600160a01b0316639121ae6d848460c0015184815181106117e8576117e8613ec3565b60200260200101516040518363ffffffff1660e01b815260040161180d929190613f26565b600060405180830381600087803b15801561182757600080fd5b505af115801561183b573d6000803e3d6000fd5b50505050808061184a90613ef6565b9150506117b5565b505b608081015151156118ff5760005b816080015151811015610d9857306001600160a01b0316630b27c9ab848460800151848151811061189557611895613ec3565b60200260200101516040518363ffffffff1660e01b81526004016118ba929190613fbe565b600060405180830381600087803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b5050505080806118f790613ef6565b915050611862565b5050565b600033816119118286612331565b9050838110156119715760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d62565b61085b8286868403612655565b600061198a8284610d9d565b6001610200820152426102608201529050610d9881612997565b600560205260009081526040902080546001820154600283018054929391926119cc90613d7c565b80601f01602080910402602001604051908101604052809291908181526020018280546119f890613d7c565b8015611a455780601f10611a1a57610100808354040283529160200191611a45565b820191906000526020600020905b815481529060010190602001808311611a2857829003601f168201915b505050505090806003018054611a5a90613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8690613d7c565b8015611ad35780601f10611aa857610100808354040283529160200191611ad3565b820191906000526020600020905b815481529060010190602001808311611ab657829003601f168201915b505050505090806005015490806006018054611aee90613d7c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1a90613d7c565b8015611b675780601f10611b3c57610100808354040283529160200191611b67565b820191906000526020600020905b815481529060010190602001808311611b4a57829003601f168201915b5050505050905086565b6000336107d98185856127f3565b600c8054906000611b8f83613ef6565b9091555050600c5460208201526101e081015115611baf57426101008201525b6001600160a01b03821660c0820181905260009081526005602090815260408220600c8054600792830180546001810182559086529390942090920192909255548154839291908110611c0457611c04613ec3565b6000918252602091829020835160149290920201805460ff19169115159190911781559082015160018201556040820151600282015560608201516003820190611c4e9082613e04565b5060808201516004820190611c639082613e04565b5060a08201518051611c7f916005840191602090910190612c7c565b5060c08201516006820180546001600160a01b039283166001600160a01b03199182161790915560e084015160078401805491909316911617905561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820190611cf09082613e04565b50610180820151600c8201556101a0820151600d820180546001600160a01b0319166001600160a01b039092169190911790556101c08201518051611d3f91600e840191602090910190612cd2565b506101e0820151600f82018054610200850151610220860151610240870151151563010000000263ff0000001991151562010000029190911663ffff0000199215156101000261ff00199615159690961661ffff1990941693909317949094171617919091179055610260820151601082015561028082015160118201556102a08201518051611dd9916012840191602090910190612cd2565b506102c091909101516013909101805460ff19169115159190911790555050565b6000611e0582610888565b905080610220015115611e5a5760405162461bcd60e51b815260206004820152601d60248201527f54686973206a6f622068617320616c72656164206265656e20706169640000006044820152606401610d62565b80610200015115611e7d5760405162461bcd60e51b8152600401610d629061400e565b60c08101516001600160a01b03163314611ed25760405162461bcd60e51b81526020600482015260166024820152752cb7ba903237b713ba1037bbb7103a3434b9903537b160511b6044820152606401610d62565b611ee1816101a0015183611f23565b610180810151604080519182524260208301527f181c311d67d2e4613578d57c5d9b50bf646716d62b0bfc741fbd0f76f40b28fe910160405180910390a15050565b6000611f2e82610888565b60c0810151604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291925034919085169063dd62ed3e90604401602060405180830381865afa158015611f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa9919061405b565b10611fc65760405162461bcd60e51b8152600401610d6290614074565b8061018001513410610d985760c08101516040516323b872dd60e01b81523060048201526001600160a01b039182166024820152346044820152908416906323b872dd906064015b6020604051808303816000875af115801561202d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120519190613ed9565b503360009081526005602090815260408083206001600160a01b0387168452600901909152812080543492906120889084906140c9565b9091555050600161022082015242610140820152610d9881612997565b60006120b082610888565b9050806102200151156121055760405162461bcd60e51b815260206004820152601d60248201527f54686973206a6f622068617320616c72656164206265656e20706169640000006044820152606401610d62565b806102000151156121285760405162461bcd60e51b8152600401610d629061400e565b336001600160a01b03168160e001516001600160a01b03160361218d5760405162461bcd60e51b815260206004820181905260248201527f596f7520617265206e6f742061737369676e656420746f2074686973206a6f626044820152606401610d62565b611ee1816101a00151836123a5565b6001600160a01b03821660009081526005602052604081206001015490036122125760405162461bcd60e51b815260206004820152602360248201527f506c6561736520676f207468726f7567682074686520757064617465206d65746044820152621a1bd960ea1b6064820152608401610d62565b600d805490600061222283613ef6565b9091555050600d548152600b8054600181018255600091909152815160049091027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9810191825560208301517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba82018054604086015115156101000261ff00199315159390931661ffff199091161791909117905560608301518392917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb01906122ec9082613e04565b5060808201518051612308916003840191602090910190612cd2565b5050600d546001600160a01b039093166000908152600560205260409020600101929092555050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919083169063dd62ed3e90604401602060405180830381865afa158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e0919061405b565b60006123b082610888565b604051636eb1769f60e11b815230600482015233602482015290915034906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa1580156123ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612423919061405b565b106124405760405162461bcd60e51b8152600401610d6290614074565b8061018001513410610d98576040516323b872dd60e01b81523060048201523360248201523460448201526001600160a01b038416906323b872dd9060640161200e565b60006124908233610d9d565b604051636eb1769f60e11b815233600482015230602482015290915034906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa1580156124df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612503919061405b565b106125805760405162461bcd60e51b815260206004820152604160248201527f416d6f756e7420617070726f766564206973206c657373207468656e20746f6b60448201527f656e207472616e7366657272656420616d6f756e7420746f20636f6e747261636064820152601d60fa1b608482015260a401610d62565b8061018001513410610d985760405163a9059cbb60e01b81523060048201523460248201526001600160a01b0384169063a9059cbb906044016020604051808303816000875af11580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc9190613ed9565b503360009081526005602090815260408083206001600160a01b038716845260090190915281208054349290612633908490612d9e565b90915550506001600160a01b0383166101a082015260018152610d9881612997565b6001600160a01b0383166126b75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d62565b6001600160a01b0382166127185760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d62565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006127858484612331565b905060001981146127ed57818110156127e05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d62565b6127ed8484848403612655565b50505050565b6001600160a01b0383166128575760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d62565b6001600160a01b0382166128b95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d62565b6001600160a01b038316600090815260208190526040902054818110156129315760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d62565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36127ed565b8060066001018260200151815481106129b2576129b2613ec3565b6000918252602091829020835160149290920201805460ff191691151591909117815590820151600182015560408201516002820155606082015160038201906129fc9082613e04565b5060808201516004820190612a119082613e04565b5060a08201518051612a2d916005840191602090910190612c7c565b5060c08201516006820180546001600160a01b039283166001600160a01b03199182161790915560e084015160078401805491909316911617905561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820190612a9e9082613e04565b50610180820151600c8201556101a0820151600d820180546001600160a01b0319166001600160a01b039092169190911790556101c08201518051612aed91600e840191602090910190612cd2565b506101e0820151600f82018054610200850151610220860151610240870151151563010000000263ff0000001991151562010000029190911663ffff0000199215156101000261ff00199615159690961661ffff1990941693909317949094171617919091179055610260820151601082015561028082015160118201556102a08201518051612b87916012840191602090910190612cd2565b506102c091909101516013909101805460ff191691151591909117905550565b604051806102e00160405280600015158152602001600081526020016000815260200160608152602001606081526020016060815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081526020016000815260200160006001600160a01b03168152602001606081526020016000151581526020016000151581526020016000151581526020016000151581526020016000815260200160008152602001606081526020016000151581525090565b828054828255906000526020600020908101928215612cc2579160200282015b82811115612cc25782518290612cb29082613e04565b5091602001919060010190612c9c565b50612cce929150612d19565b5090565b828054828255906000526020600020908101928215612d0d579160200282015b82811115612d0d578251825591602001919060010190612cf2565b50612cce929150612d36565b80821115612cce576000612d2d8282612d4b565b50600101612d19565b5b80821115612cce5760008155600101612d37565b508054612d5790613d7c565b6000825580601f10612d67575050565b601f016020900490600052602060002090810190612d859190612d36565b50565b634e487b7160e01b600052601160045260246000fd5b808201808211156107df576107df612d88565b6000815180845260005b81811015612dd757602081850181015186830182015201612dbb565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006112e06020830184612db1565b80356001600160a01b0381168114612e2157600080fd5b919050565b60008060408385031215612e3957600080fd5b612e4283612e0a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715612e8857612e88612e50565b60405290565b60405160c081016001600160401b0381118282101715612e8857612e88612e50565b604051606081016001600160401b0381118282101715612e8857612e88612e50565b60405160e081016001600160401b0381118282101715612e8857612e88612e50565b6040516102e081016001600160401b0381118282101715612e8857612e88612e50565b604051601f8201601f191681016001600160401b0381118282101715612f3f57612f3f612e50565b604052919050565b600082601f830112612f5857600080fd5b81356001600160401b03811115612f7157612f71612e50565b612f84601f8201601f1916602001612f17565b818152846020838601011115612f9957600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215612fc857600080fd5b604051604081016001600160401b038282108183111715612feb57612feb612e50565b81604052829350843591508082111561300357600080fd5b61300f86838701612f47565b8352602085013591508082111561302557600080fd5b5061303285828601612f47565b6020830152505092915050565b6000806040838503121561305257600080fd5b61305b83612e0a565b915060208301356001600160401b0381111561307657600080fd5b61308285828601612fb6565b9150509250929050565b6000806000606084860312156130a157600080fd5b6130aa84612e0a565b92506130b860208501612e0a565b9150604084013590509250925092565b6000602082840312156130da57600080fd5b5035919050565b6000815180845260208085019450848260051b860182860160005b85811015613126578383038952613114838351612db1565b988501989250908401906001016130fc565b5090979650505050505050565b600081518084526020808501945080840160005b8381101561316357815187529582019590820190600101613147565b509495945050505050565b6020815261318160208201835115159052565b6020820151604082015260408201516060820152600060608301516102e08060808501526131b3610300850183612db1565b91506080850151601f19808685030160a08701526131d18483612db1565b935060a08701519150808685030160c08701526131ee84836130e1565b935060c0870151915061320c60e08701836001600160a01b03169052565b60e0870151915061010061322a818801846001600160a01b03169052565b8701516101208781019190915287015161014080880191909152870151610160808801919091528701518685038201610180808901919091529092506132708584612db1565b908801516101a08881019190915288015190945091506101c061329d818801846001600160a01b03169052565b808801519250506101e08187860301818801526132ba8584613133565b9450808801519250506102006132d38188018415159052565b87015191506102206132e88782018415159052565b87015191506102406132fd8782018415159052565b87015191506102606133128782018415159052565b870151610280878101919091528701516102a08088019190915287015186850382016102c08089019190915290925061334b8584613133565b945080880151925050506133628286018215159052565b5090949350505050565b60006020828403121561337e57600080fd5b6112e082612e0a565b6000806040838503121561339a57600080fd5b823591506133aa60208401612e0a565b90509250929050565b6000806000606084860312156133c857600080fd5b6133d184612e0a565b925060208401356001600160401b03808211156133ed57600080fd5b908501906080828803121561340157600080fd5b613409612e66565b82358152602083013560ff8116811461342157600080fd5b602082015260408301358281111561343857600080fd5b61344489828601612f47565b60408301525060608301356060820152809450505050604084013590509250925092565b600060c0828403121561347a57600080fd5b613482612e8e565b9050813581526020820135602082015260408201356001600160401b03808211156134ac57600080fd5b6134b885838601612f47565b604084015260608401359150808211156134d157600080fd5b6134dd85838601612f47565b606084015260808401359150808211156134f657600080fd5b5061350384828501612f47565b60808301525061351560a08301612e0a565b60a082015292915050565b6000806040838503121561353357600080fd5b61353c83612e0a565b915060208301356001600160401b0381111561355757600080fd5b61308285828601613468565b8015158114612d8557600080fd5b8035612e2181613563565b60006001600160401b0382111561359557613595612e50565b5060051b60200190565b600082601f8301126135b057600080fd5b813560206135c56135c08361357c565b612f17565b82815260059290921b840181019181810190868411156135e457600080fd5b8286015b848110156135ff57803583529183019183016135e8565b509695505050505050565b600060a0828403121561361c57600080fd5b60405160a081016001600160401b03828210818311171561363f5761363f612e50565b81604052829350843583526020850135915061365a82613563565b8160208401526040850135915061367082613563565b816040840152606085013591508082111561368a57600080fd5b61369686838701612f47565b606084015260808501359150808211156136af57600080fd5b506136bc8582860161359f565b6080830152505092915050565b600082601f8301126136da57600080fd5b813560206136ea6135c08361357c565b82815260059290921b8401810191818101908684111561370957600080fd5b8286015b848110156135ff5780356001600160401b0381111561372c5760008081fd5b61373a8986838b0101612fb6565b84525091830191830161370d565b600082601f83011261375957600080fd5b813560206137696135c08361357c565b82815260059290921b8401810191818101908684111561378857600080fd5b8286015b848110156135ff5780356001600160401b03808211156137ac5760008081fd5b908801906060828b03601f19018113156137c65760008081fd5b6137ce612eb0565b878401358152604080850135848111156137e85760008081fd5b6137f68e8b83890101612f47565b838b01525091840135918383111561380e5760008081fd5b61381c8d8a85880101612f47565b90820152865250505091830191830161378c565b600082601f83011261384157600080fd5b813560206138516135c08361357c565b82815260059290921b8401810191818101908684111561387057600080fd5b8286015b848110156135ff5780356001600160401b038111156138935760008081fd5b6138a18986838b0101613468565b845250918301918301613874565b600080604083850312156138c257600080fd5b6138cb83612e0a565b915060208301356001600160401b03808211156138e757600080fd5b9084019060e082870312156138fb57600080fd5b613903612ed2565b82358281111561391257600080fd5b61391e88828601612f47565b82525060208301358281111561393357600080fd5b61393f88828601612f47565b60208301525060408301358281111561395757600080fd5b6139638882860161360a565b60408301525060608301358281111561397b57600080fd5b61398788828601612f47565b60608301525060808301358281111561399f57600080fd5b6139ab888286016136c9565b60808301525060a0830135828111156139c357600080fd5b6139cf88828601613748565b60a08301525060c0830135828111156139e757600080fd5b6139f388828601613830565b60c0830152508093505050509250929050565b86815285602082015260c060408201526000613a2560c0830187612db1565b8281036060840152613a378187612db1565b905084608084015282810360a0840152613a518185612db1565b9998505050505050505050565b600082601f830112613a6f57600080fd5b81356020613a7f6135c08361357c565b82815260059290921b84018101918181019086841115613a9e57600080fd5b8286015b848110156135ff5780356001600160401b03811115613ac15760008081fd5b613acf8986838b0101612f47565b845250918301918301613aa2565b60008060408385031215613af057600080fd5b613af983612e0a565b915060208301356001600160401b0380821115613b1557600080fd5b908401906102e08287031215613b2a57600080fd5b613b32612ef4565b613b3b83613571565b81526020830135602082015260408301356040820152606083013582811115613b6357600080fd5b613b6f88828601612f47565b606083015250608083013582811115613b8757600080fd5b613b9388828601612f47565b60808301525060a083013582811115613bab57600080fd5b613bb788828601613a5e565b60a083015250613bc960c08401612e0a565b60c0820152613bda60e08401612e0a565b60e08201526101008381013590820152610120808401359082015261014080840135908201526101608084013583811115613c1457600080fd5b613c2089828701612f47565b8284015250506101808084013581830152506101a0613c40818501612e0a565b908201526101c08381013583811115613c5857600080fd5b613c648982870161359f565b8284015250506101e0613c78818501613571565b90820152610200613c8a848201613571565b90820152610220613c9c848201613571565b90820152610240613cae848201613571565b90820152610260838101359082015261028080840135908201526102a08084013583811115613cdc57600080fd5b613ce88982870161359f565b8284015250506102c09150613cfe828401613571565b828201528093505050509250929050565b60008060408385031215613d2257600080fd5b613d2b83612e0a565b915060208301356001600160401b03811115613d4657600080fd5b6130828582860161360a565b60008060408385031215613d6557600080fd5b613d6e83612e0a565b91506133aa60208401612e0a565b600181811c90821680613d9057607f821691505b602082108103613db057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d9857600081815260208120601f850160051c81016020861015613ddd5750805b601f850160051c820191505b81811015613dfc57828155600101613de9565b505050505050565b81516001600160401b03811115613e1d57613e1d612e50565b613e3181613e2b8454613d7c565b84613db6565b602080601f831160018114613e665760008415613e4e5750858301515b600019600386901b1c1916600185901b178555613dfc565b600085815260208120601f198616915b82811015613e9557888601518255948401946001909101908401613e76565b5085821015613eb35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613eeb57600080fd5b81516112e081613563565b600060018201613f0857613f08612d88565b5060010190565b80820281158282048414176107df576107df612d88565b6001600160a01b03838116825260406020808401829052845182850152840151606084015283015160c0608084015260009190613f67610100850182612db1565b90506060850151603f19808684030160a0870152613f858383612db1565b925060808701519150808684030160c087015250613fa38282612db1565b9150508160a08601511660e085015280925050509392505050565b60018060a01b03831681526040602082015260008251604080840152613fe76080840182612db1565b90506020840151603f198483030160608501526140048282612db1565b9695505050505050565b6020808252602d908201527f7761697420666f72207468652061737369676e656520746f20636f6e6669726d60408201526c20636f6d706c6574656e65737360981b606082015260800190565b60006020828403121561406d57600080fd5b5051919050565b60208082526035908201527f416d6f756e7420617070726f766564206973206c657373207468656e20746f6b604082015274195b881d1c985b9cd9995c9c995908185b5bdd5b9d605a1b606082015260800190565b818103818111156107df576107df612d8856fea264697066735822122069abce7f2c333f28c30004d0f03f032642365f8fa6c29820ce222b39e0e8bedf64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "ownerWithdraw(address,uint256)": {
        "params": {
          "_token": "s",
          "jobId": "we"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 69,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 75,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 77,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 79,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 81,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Profile)968_storage)"
      },
      {
        "astId": 782,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "vars",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Item)840_storage"
      },
      {
        "astId": 787,
        "contract": "contracts/Detasker.sol:Detasker",
        "label": "timeForConformation",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Dispute)845_storage)dyn_storage": {
        "base": "t_struct(Dispute)845_storage",
        "encoding": "dynamic_array",
        "label": "struct Detasker.Dispute[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Freelance)857_storage)dyn_storage": {
        "base": "t_struct(Freelance)857_storage",
        "encoding": "dynamic_array",
        "label": "struct Detasker.Freelance[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Job)907_storage)dyn_storage": {
        "base": "t_struct(Job)907_storage",
        "encoding": "dynamic_array",
        "label": "struct Detasker.Job[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Rating)928_storage)dyn_storage": {
        "base": "t_struct(Rating)928_storage",
        "encoding": "dynamic_array",
        "label": "struct Detasker.Rating[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Skill)941_storage)dyn_storage": {
        "base": "t_struct(Skill)941_storage",
        "encoding": "dynamic_array",
        "label": "struct Detasker.Skill[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Social)995_storage)dyn_storage": {
        "base": "t_struct(Social)995_storage",
        "encoding": "dynamic_array",
        "label": "struct Detasker.Social[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Profile)968_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Detasker.Profile)",
        "numberOfBytes": "32",
        "value": "t_struct(Profile)968_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Dispute)845_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Dispute",
        "members": [
          {
            "astId": 842,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "reason",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 844,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Freelance)857_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Freelance",
        "members": [
          {
            "astId": 847,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 849,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "isFreelancer",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 851,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "active",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 853,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "mainSkills",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 856,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "skillsId",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Item)840_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Item",
        "members": [
          {
            "astId": 805,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 809,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "jobs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Job)907_storage)dyn_storage"
          },
          {
            "astId": 813,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "ratings",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Rating)928_storage)dyn_storage"
          },
          {
            "astId": 817,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "skills",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(Skill)941_storage)dyn_storage"
          },
          {
            "astId": 821,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "dispute",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Dispute)845_storage)dyn_storage"
          },
          {
            "astId": 825,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "freelance",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(Freelance)857_storage)dyn_storage"
          },
          {
            "astId": 827,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "jobCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 829,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "freelanceCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 831,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "ratingCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 833,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "tagCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 835,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "skillCount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 837,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "userCount",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 839,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "bnbToken",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Job)907_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Job",
        "members": [
          {
            "astId": 859,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "hasFunds",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 861,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 863,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "profileId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 865,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 867,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 870,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "img",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 872,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "owner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 874,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "requester",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 876,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "postedDate",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 878,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "date",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 880,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "datePaid",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 882,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "documents",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 884,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "requestedPaymentAmount",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 886,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "token",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 889,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "tags",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 891,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "publish",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 893,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "completed",
            "offset": 1,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 895,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "paid",
            "offset": 2,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 897,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "assigned",
            "offset": 3,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 899,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "dateCompleted",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 901,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "datePublished",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 904,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "dispute",
            "offset": 0,
            "slot": "18",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 906,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "deleted",
            "offset": 0,
            "slot": "19",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(Profile)968_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Profile",
        "members": [
          {
            "astId": 943,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 945,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "freeLanceId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 947,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 949,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 953,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "socials",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Social)995_storage)dyn_storage"
          },
          {
            "astId": 955,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "signedUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 957,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 960,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "jobsId",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 963,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "ratings",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 967,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "escrow",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Rating)928_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Rating",
        "members": [
          {
            "astId": 921,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 923,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "rating",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 925,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "review",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 927,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "jobId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Skill)941_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Skill",
        "members": [
          {
            "astId": 930,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 932,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "profileId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 934,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "skill",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 936,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "skillName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 938,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "url",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 940,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "user",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Social)995_storage": {
        "encoding": "inplace",
        "label": "struct Detasker.Social",
        "members": [
          {
            "astId": 992,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 994,
            "contract": "contracts/Detasker.sol:Detasker",
            "label": "url",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}